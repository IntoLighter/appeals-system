package com.intolighter.appealssystem.persistence.repositories;

import com.intolighter.appealssystem.web.errors.exceptions.UserNotFoundException;
import com.intolighter.appealssystem.persistence.models.ERole;
import com.intolighter.appealssystem.persistence.models.User;
import lombok.val;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Repository;

import javax.annotation.PostConstruct;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Arrays;
import java.util.Optional;

@Repository
public class UserRepository extends RepositoryUtils {

    public UserRepository(JdbcTemplate jdbcTemplate) {
        super(jdbcTemplate, "users");
    }

    private static User mapToUser(ResultSet rs, int rowNum) throws SQLException {
        val roleName = rs.getInt("role");
        val role = Arrays.stream(ERole.values())
                .filter(r -> r.ordinal() == roleName)
                .findFirst().get();

        return new User(
                rs.getLong("id"),
                rs.getString("first_name"),
                rs.getString("phone_number"),
                rs.getString("email"),
                rs.getString("password"),
                rs.getBoolean("enabled"),
                role);
    }

    public User save(User user) {
        jdbcTemplate.update(
                "INSERT INTO users (first_name, last_name, phone_number, password, email, enabled, role) VALUES (?, ?, ?, ?, ?, ?, ?)",
                user.getFirstName(), user.getLastName(), user.getPhoneNumber(), user.getPassword(), user.getEmail(), user.isEnabled(), user.getRole().ordinal());

        return findByEmail(user.getEmail())
                .orElseThrow(() -> new UserNotFoundException(
                        "User with email: '" + user.getEmail() + "' not found after saving"));
    }

    public void updateEnabled(User user) {
        update("enabled", true, user);
    }

    public void updatePassword(String password, User user) {
        update("password", password, user);
    }

    public Optional<User> findByEmail(String email) {
        return Optional.ofNullable(getUserByParameter("email", email));
    }

    public Optional<User> findById(long id) {
        return Optional.ofNullable(getUserByParameter("id", id));
    }

    public boolean existsByPhoneNumber(String phoneNumber) {
        return checkForExistence("phone_number", phoneNumber);
    }

    public boolean existsByEmail(String email) {
        return checkForExistence("email", email);
    }

    private  <T> void update(String paramName, T paramValue, User user) {
        jdbcTemplate.update("UPDATE users SET " + paramName +  " = ? WHERE id = ?", paramValue, user.getId());
    }

    private <T> User getUserByParameter(String paramName, T paramValue) {
        return jdbcTemplate.queryForObject(
                String.format("SELECT * FROM users WHERE %s = %s", paramName, "'" + paramValue + "'"),
                UserRepository::mapToUser);
    }

    @PostConstruct
    private void createDb() {
        jdbcTemplate.execute("CREATE TABLE IF NOT EXISTS users(" +
                "id bigint generated by default as identity primary key)");
    }
}
